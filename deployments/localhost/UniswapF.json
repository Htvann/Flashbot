{
  "address": "0x2a810409872AfC346F9B5b26571Fd6eC42EA4849",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_devFee",
          "type": "uint8"
        }
      ],
      "name": "setDevFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_swapFee",
          "type": "uint32"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x50d8ef41e08e09213ab9c88873387c4c538dc4a66180687012b4eed1c9404b8a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2a810409872AfC346F9B5b26571Fd6eC42EA4849",
    "transactionIndex": 0,
    "gasUsed": "3223459",
    "logsBloom": "0x
    "blockHash": "0xcc82f765215482e89939dd03d7459b78652ff686479baffd95695051d2a801c0",
    "transactionHash": "0x50d8ef41e08e09213ab9c88873387c4c538dc4a66180687012b4eed1c9404b8a",
    "logs": [],
    "blockNumber": 130,
    "cumulativeGasUsed": "3223459",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "ffa41f2d70ce78678fbbd21becdcffff",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_devFee\",\"type\":\"uint8\"}],\"name\":\"setDevFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_swapFee\",\"type\":\"uint32\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/WineryFactory.sol\":\"WineryFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/WineryERC20.sol\":{\"content\":\"pragma solidity =0.5.16;\\nimport \\\"./interfaces/IWineryERC20.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract WineryERC20 is IWineryERC20 {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"Winery LPs\\\";\\n    string public constant symbol = \\\"Winery-LP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Winery: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"Winery: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x5dd6d396a85f3d333ce9519b01b459f9c455982364265300550bf3ae9b292b3f\"},\"contracts/WineryFactory.sol\":{\"content\":\"pragma solidity =0.5.16;\\nimport \\\"./interfaces/IWineryFactory.sol\\\";\\nimport './WineryPair.sol';\\n\\ncontract WineryFactory is IWineryFactory {\\n    address public feeTo;\\n    address public feeToSetter;\\n    bytes32 public INIT_CODE_HASH = keccak256(abi.encodePacked(type(WineryPair).creationCode));\\n\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"Winery: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Winery: ZERO_ADDRESS\\\");\\n        require(getPair[token0][token1] == address(0), \\\"Winery: PAIR_EXISTS\\\"); // single check is sufficient\\n        bytes memory bytecode = type(WineryPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IWineryPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"Winery: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"Winery: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setDevFee(address _pair, uint8 _devFee) external {\\n        require(msg.sender == feeToSetter, \\\"Winery: FORBIDDEN\\\");\\n        require(_devFee > 0, \\\"Winery: FORBIDDEN_FEE\\\");\\n        WineryPair(_pair).setDevFee(_devFee);\\n    }\\n\\n    function setSwapFee(address _pair, uint32 _swapFee) external {\\n        require(msg.sender == feeToSetter, \\\"Winery: FORBIDDEN\\\");\\n        WineryPair(_pair).setSwapFee(_swapFee);\\n    }\\n}\\n\",\"keccak256\":\"0x56ea3ae7bbc1c3dc08f50a40f8c4fd360234e122cbfb48c7e0e80a530badd553\"},\"contracts/WineryPair.sol\":{\"content\":\"pragma solidity =0.5.16;\\nimport \\\"./interfaces/IWineryPair.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IWineryCallee.sol\\\";\\nimport \\\"./interfaces/IWineryFactory.sol\\\";\\nimport \\\"./WineryERC20.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract WineryPair is IWineryPair, WineryERC20 {\\n  using SafeMath for uint256;\\n  using UQ112x112 for uint224;\\n\\n  uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n  bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n  address public factory;\\n  address public token0;\\n  address public token1;\\n\\n  uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n  uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n  uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n  uint256 public price0CumulativeLast;\\n  uint256 public price1CumulativeLast;\\n  uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n  uint32 public swapFee = 25; // uses 0.1% default\\n  uint32 public devFee = 1; // uses 0.5% default from swap fee\\n\\n  uint256 private unlocked = 1;\\n  modifier lock() {\\n    require(unlocked == 1, \\\"Winery: LOCKED\\\");\\n    unlocked = 0;\\n    _;\\n    unlocked = 1;\\n  }\\n\\n  function getReserves()\\n    public\\n    view\\n    returns (\\n      uint112 _reserve0,\\n      uint112 _reserve1,\\n      uint32 _blockTimestampLast\\n    )\\n  {\\n    _reserve0 = reserve0;\\n    _reserve1 = reserve1;\\n    _blockTimestampLast = blockTimestampLast;\\n  }\\n\\n  function _safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) private {\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Winery: TRANSFER_FAILED\\\");\\n  }\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  constructor() public {\\n    factory = msg.sender;\\n  }\\n\\n  // called once by the factory at time of deployment\\n  function initialize(address _token0, address _token1) external {\\n    require(msg.sender == factory, \\\"Winery: FORBIDDEN\\\"); // sufficient check\\n    token0 = _token0;\\n    token1 = _token1;\\n  }\\n\\n  function setSwapFee(uint32 _swapFee) external {\\n    require(_swapFee >= 0, \\\"WineryPair: lower than 0\\\");\\n    require(msg.sender == factory, \\\"WineryPair: FORBIDDEN\\\");\\n    require(_swapFee <= 10000, \\\"WineryPair: FORBIDDEN_FEE\\\");\\n    swapFee = _swapFee;\\n  }\\n\\n  function setDevFee(uint32 _devFee) external {\\n    require(_devFee > 0, \\\"WineryPair: lower then 0\\\");\\n    require(msg.sender == factory, \\\"WineryPair: FORBIDDEN\\\");\\n    require(_devFee <= 500, \\\"WineryPair: FORBIDDEN_FEE\\\");\\n    devFee = _devFee;\\n  }\\n\\n  // update reserves and, on the first call per block, price accumulators\\n  function _update(\\n    uint256 balance0,\\n    uint256 balance1,\\n    uint112 _reserve0,\\n    uint112 _reserve1\\n  ) private {\\n    require(balance0 <= uint112(-1) && balance1 <= uint112(-1), \\\"Winery: OVERFLOW\\\");\\n    uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n    uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n      // * never overflows, and + overflow is desired\\n      price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n      price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n    }\\n    reserve0 = uint112(balance0);\\n    reserve1 = uint112(balance1);\\n    blockTimestampLast = blockTimestamp;\\n    emit Sync(reserve0, reserve1);\\n  }\\n\\n  // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n  function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n    address feeTo = IWineryFactory(factory).feeTo();\\n    feeOn = feeTo != address(0);\\n    uint256 _kLast = kLast; // gas savings\\n    if (feeOn) {\\n      if (_kLast != 0) {\\n        uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\\n        uint256 rootKLast = Math.sqrt(_kLast);\\n        if (rootK > rootKLast) {\\n          uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\\n          uint256 denominator = rootK.mul(devFee).add(rootKLast);\\n          uint256 liquidity = numerator / denominator;\\n          if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n      }\\n    } else if (_kLast != 0) {\\n      kLast = 0;\\n    }\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function mint(address to) external lock returns (uint256 liquidity) {\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n    uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n    uint256 amount0 = balance0.sub(_reserve0);\\n    uint256 amount1 = balance1.sub(_reserve1);\\n\\n    bool feeOn = _mintFee(_reserve0, _reserve1);\\n    uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n    if (_totalSupply == 0) {\\n      liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n      _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n    } else {\\n      liquidity = Math.min(\\n        amount0.mul(_totalSupply) / _reserve0,\\n        amount1.mul(_totalSupply) / _reserve1\\n      );\\n    }\\n    require(liquidity > 0, \\\"Winery: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n    _mint(to, liquidity);\\n\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n    emit Mint(msg.sender, amount0, amount1);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    address _token0 = token0; // gas savings\\n    address _token1 = token1; // gas savings\\n    uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n    uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n    uint256 liquidity = balanceOf[address(this)];\\n\\n    bool feeOn = _mintFee(_reserve0, _reserve1);\\n    uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n    amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n    amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n    require(amount0 > 0 && amount1 > 0, \\\"Winery: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n    _burn(address(this), liquidity);\\n    _safeTransfer(_token0, to, amount0);\\n    _safeTransfer(_token1, to, amount1);\\n    balance0 = IERC20(_token0).balanceOf(address(this));\\n    balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n    emit Burn(msg.sender, amount0, amount1, to);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external lock {\\n    // console.log(\\\"Swap function in pair start -----------------------------\\\");\\n    // require(amount0Out > 0 || amount1Out > 0, \\\"Winery: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    // (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    // require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"Winery: INSUFFICIENT_LIQUIDITY\\\");\\n\\n    // console.log(\\\"amount0Out: %s, amount1Out: %s\\\", amount0Out, amount1Out);\\n    // console.log(\\\"token0: %s, token1: %s\\\", token0, token1);\\n    // console.log(\\\"reserve0: %s, reserve1: %s\\\", _reserve0, _reserve1);\\n    // // 182,354,391,693,594,814,677\\n    // uint balance0;\\n    // uint balance1;\\n    // {\\n    //   // scope for _token{0,1}, avoids stack too deep errors\\n    //   address _token0 = token0;\\n    //   address _token1 = token1;\\n    //   require(to != _token0 && to != _token1, \\\"Winery: INVALID_TO\\\");\\n    //   console.log(\\\"Msg sender: \\\", msg.sender);\\n    //   console.log(\\\"Balance of sender in token0: \\\", IERC20(_token0).balanceOf(msg.sender));\\n    //   console.log(\\\"Balance of sender in token1: \\\", IERC20(_token1).balanceOf(msg.sender));\\n    //   console.log(\\\"To: \\\", to);\\n    //   if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n    //   if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n    //   if (data.length > 0) IWineryCallee(to).WineryCall(msg.sender, amount0Out, amount1Out, data);\\n    //   balance0 = IERC20(_token0).balanceOf(address(this));\\n    //   balance1 = IERC20(_token1).balanceOf(address(this));\\n    //   console.log(\\\"Balance of pair in token0: \\\", balance0);\\n    //   console.log(\\\"Balance of pair in token1: \\\", balance1);\\n    // }\\n\\n    // uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n    // uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n    // require(amount0In > 0 || amount1In > 0, \\\"Winery: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\n    // {\\n    //   // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n    //   uint _swapFee = swapFee;\\n    //   uint balance0Adjusted = balance0.mul(10000).sub(amount0In.mul(_swapFee));\\n    //   uint balance1Adjusted = balance1.mul(10000).sub(amount1In.mul(_swapFee));\\n    //   console.log(\\\"balance 0 \\\", balance0);\\n    //   console.log(\\\"reserve 0 \\\", _reserve0);\\n    //   console.log(\\\"amount 0 out \\\", amount0Out);\\n    //   console.log(\\\"amount 0 in \\\", amount0In);\\n    //   console.log(\\\"balance 0 ajdusted\\\", balance0Adjusted);\\n    //   console.log(\\\"balance 1 \\\", balance1);\\n    //   console.log(\\\"reserve 1 \\\", _reserve1);\\n    //   console.log(\\\"amount 1 out \\\", amount1Out);\\n    //   console.log(\\\"amount 1 in \\\", amount1In);\\n    //   console.log(\\\"balance 1 ajdusted\\\", balance1Adjusted);\\n    //   console.log(\\\"swap fee \\\", swapFee);\\n    //   console.log(\\\"Left: \\\", balance0Adjusted.mul(balance1Adjusted));\\n    //   console.log(\\\"Right: \\\", uint(_reserve0).mul(_reserve1).mul(10000**2));\\n    //   console.log(\\n    //     \\\"Is K: \\\",\\n    //     balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2)\\n    //   );\\n    //   console.log(\\\"------------------------------\\\");\\n\\n    //   require(\\n    //     balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2),\\n    //     \\\"Winery: K\\\"\\n    //   );\\n    // }\\n\\n    // _update(balance0, balance1, _reserve0, _reserve1);\\n    // emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    // console.log(\\\"Swap function in pair ended -----------------------------\\\");\\n    require(amount0Out > 0 || amount1Out > 0, \\\"Pancake: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"Pancake: INSUFFICIENT_LIQUIDITY\\\");\\n\\n    uint256 balance0;\\n    uint256 balance1;\\n    {\\n      // scope for _token{0,1}, avoids stack too deep errors\\n      address _token0 = token0;\\n      address _token1 = token1;\\n      require(to != _token0 && to != _token1, \\\"Pancake: INVALID_TO\\\");\\n      if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n      if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n      if (data.length > 0) IWineryCallee(to).WineryCall(msg.sender, amount0Out, amount1Out, data);\\n      balance0 = IERC20(_token0).balanceOf(address(this));\\n      balance1 = IERC20(_token1).balanceOf(address(this));\\n    }\\n    uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n    uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n    require(amount0In > 0 || amount1In > 0, \\\"Pancake: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    {\\n      // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n      uint256 balance0Adjusted = (balance0.mul(10000).sub(amount0In.mul(swapFee)));\\n      uint256 balance1Adjusted = (balance1.mul(10000).sub(amount1In.mul(swapFee)));\\n      console.log(\\\"Pool ----------------\\\");\\n      console.log(\\\"balance 0 \\\", balance0);\\n      console.log(\\\"reserve 0 \\\", _reserve0);\\n      console.log(\\\"amount 0 Out \\\", amount0Out);\\n      console.log(\\\"amount 0 In \\\", amount0In);\\n      console.log(\\\"balance 0 ajdusted\\\", balance0Adjusted);\\n      console.log(\\\"balance 1 \\\", balance1);\\n      console.log(\\\"reserve 1 \\\", _reserve1);\\n      console.log(\\\"amount 1 Out \\\", amount1Out);\\n      console.log(\\\"amount 1 In \\\", amount1In);\\n      console.log(\\\"balance 1 ajdusted\\\", balance1Adjusted);\\n      console.log(\\\"swap fee: \\\", swapFee);\\n      console.log(\\\"Left: \\\", balance0Adjusted.mul(balance1Adjusted));\\n      console.log(\\\"Right: \\\", uint256(_reserve0).mul(_reserve1).mul(10000**2));\\n      console.log(\\n        \\\"Is K: \\\",\\n        balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(10000**2)\\n      );\\n      require(\\n        balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(10000**2),\\n        \\\"Pancake: K\\\"\\n      );\\n    }\\n\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n  }\\n\\n  // force balances to match reserves\\n  function skim(address to) external lock {\\n    address _token0 = token0; // gas savings\\n    address _token1 = token1; // gas savings\\n    _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n    _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n  }\\n\\n  // force reserves to match balances\\n  function sync() external lock {\\n    _update(\\n      IERC20(token0).balanceOf(address(this)),\\n      IERC20(token1).balanceOf(address(this)),\\n      reserve0,\\n      reserve1\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x90f6c81ae6a8f468d3f03bfbf823602eb9cf82460a6a7a37cd25118ecc7d2ff5\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2a50aae5ba71b9b2dcf0596dc443487f707e21f6e5d023047cac8eb584267cf4\"},\"contracts/interfaces/IWineryCallee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWineryCallee {\\n    function WineryCall(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xedf257e06a81b7a3f89be34fa75e7507580270dd19cc3bc4476119c0f350aba4\"},\"contracts/interfaces/IWineryERC20.sol\":{\"content\":\"interface IWineryERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0x45d2158e52c35e68ddb93706aa119c71e3f5b35e1173e4fba258c5f5bbb03300\"},\"contracts/interfaces/IWineryFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWineryFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function INIT_CODE_HASH() external pure returns (bytes32);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setDevFee(address pair, uint8 _devFee) external;\\n\\n    function setSwapFee(address pair, uint32 swapFee) external;\\n}\\n\",\"keccak256\":\"0x359af4ad66311d2311ab3e8caca8fe767a9c4db4876c19dbc9939e3519dc487b\"},\"contracts/interfaces/IWineryPair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWineryPair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function swapFee() external view returns (uint32);\\n\\n    function devFee() external view returns (uint32);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n\\n    function setSwapFee(uint32) external;\\n\\n    function setDevFee(uint32) external;\\n}\\n\",\"keccak256\":\"0x05f442a94167ae94b3a4e6d026c94b5ed232e34aeee1c12be265765ebab2676c\"},\"contracts/libraries/Math.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5137844e95d605b51c6c50520923d03512bddb1909acc7461a475d007cdd467c\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xb7e4a412ae0f42c9d19f5dbb4308f2950114c6bb21b5591e9c2a648d84552c3c\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xb8c84a42df4d7a8bceea1fd33fde32f7f807fe92b93dbc3ad670df8a02ad513d\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\"}},\"version\":1}",
  "bytecode": "0x6080604081905261001060a06100e9565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106100565780518252601f199092019160209182019101610037565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001206002553480156100a057600080fd5b506040516161b93803806161b9833981810160405260208110156100c357600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556100f6565b612c10806135a983390190565b6134a4806101056000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639e68ceb8116100715780639e68ceb814610119578063a2e74af61461014d578063c9c6539614610173578063e6a43905146101a1578063ef0bc993146101cf578063f46901ed146101fe576100a9565b8063017e7e58146100ae578063094b7415146100d25780631e3dd18b146100da578063257671f5146100f7578063574f2ba314610111575b600080fd5b6100b6610224565b604080516001600160a01b039092168252519081900360200190f35b6100b6610233565b6100b6600480360360208110156100f057600080fd5b5035610242565b6100ff610269565b60408051918252519081900360200190f35b6100ff61026f565b61014b6004803603604081101561012f57600080fd5b5080356001600160a01b0316906020013563ffffffff16610275565b005b61014b6004803603602081101561016357600080fd5b50356001600160a01b0316610331565b6100b66004803603604081101561018957600080fd5b506001600160a01b03813581169160200135166103a6565b6100b6600480360360408110156101b757600080fd5b506001600160a01b03813581169160200135166106cb565b61014b600480360360408110156101e557600080fd5b5080356001600160a01b0316906020013560ff166106f1565b61014b6004803603602081101561021457600080fd5b50356001600160a01b03166107dd565b6000546001600160a01b031681565b6001546001600160a01b031681565b6004818154811061024f57fe5b6000918252602090912001546001600160a01b0316905081565b60025481565b60045490565b6001546001600160a01b031633146102c8576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b6040805163d6d788c360e01b815263ffffffff8316600482015290516001600160a01b0384169163d6d788c391602480830192600092919082900301818387803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b505050505050565b6001546001600160a01b03163314610384576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b0316141561040f576040805162461bcd60e51b815260206004820152601b60248201527f57696e6572793a204944454e544943414c5f4144445245535345530000000000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b031610610432578385610435565b84845b90925090506001600160a01b03821661048c576040805162461bcd60e51b815260206004820152601460248201527357696e6572793a205a45524f5f4144445245535360601b604482015290519081900360640190fd5b6001600160a01b038281166000908152600360209081526040808320858516845290915290205416156104fc576040805162461bcd60e51b815260206004820152601360248201527257696e6572793a20504149525f45584953545360681b604482015290519081900360640190fd5b60606040518060200161050e90610852565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b1580156105e157600080fd5b505af11580156105f5573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314610744576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b60008160ff1611610794576040805162461bcd60e51b815260206004820152601560248201527457696e6572793a20464f5242494444454e5f46454560581b604482015290519081900360640190fd5b60408051623c150b60e41b815260ff8316600482015290516001600160a01b038416916303c150b091602480830192600092919082900301818387803b15801561031557600080fd5b6001546001600160a01b03163314610830576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612c10806108608339019056fe6080604052600c805463ffffffff60201b1963ffffffff19909116601917166401000000001790556001600d5534801561003857600080fd5b506040514690806052612bbe8239604080519182900360520182208282018252600a83526957696e657279204c507360b01b6020938401528151808301835260018152603160f81b908401528151808401919091527f209f97c6c98b3e10fddb1b3b88872f6547eb8cd111c9b6c664e6507a7cfdccb8818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b03191633179055612a96806101286000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636827e7641161010f578063ba9a7a56116100a2578063d505accf11610071578063d505accf146105c4578063d6d788c314610615578063dd62ed3e14610638578063fff6cae914610666576101e5565b8063ba9a7a5614610586578063bc25cf771461058e578063c45a0155146105b4578063d21220a7146105bc576101e5565b80637ecebe00116100de5780637ecebe00146104ed57806389afcb441461051357806395d89b4114610552578063a9059cbb1461055a576101e5565b80636827e764146104915780636a6278421461049957806370a08231146104bf5780637464fc3d146104e5576101e5565b806323b872dd11610187578063485cc95511610156578063485cc9551461043257806354cf2aeb146104605780635909c0d5146104815780635a3d549314610489576101e5565b806323b872dd146103ce57806330adf81f14610404578063313ce5671461040c5780633644e5151461042a576101e5565b80630902f1ac116101c35780630902f1ac14610318578063095ea7b3146103505780630dfe16811461039057806318160ddd146103b4576101e5565b8063022c0d9f146101ea57806303c150b01461027857806306fdde031461029b575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b50909250905061066e565b005b6102766004803603602081101561028e57600080fd5b503563ffffffff16610ef2565b6102a3611025565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102dd5781810151838201526020016102c5565b50505050905090810190601f16801561030a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61032061104b565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61037c6004803603604081101561036657600080fd5b506001600160a01b038135169060200135611075565b604080519115158252519081900360200190f35b61039861108c565b604080516001600160a01b039092168252519081900360200190f35b6103bc61109b565b60408051918252519081900360200190f35b61037c600480360360608110156103e457600080fd5b506001600160a01b038135811691602081013590911690604001356110a1565b6103bc61113b565b61041461115f565b6040805160ff9092168252519081900360200190f35b6103bc611164565b6102766004803603604081101561044857600080fd5b506001600160a01b038135811691602001351661116a565b6104686111eb565b6040805163ffffffff9092168252519081900360200190f35b6103bc6111f7565b6103bc6111fd565b610468611203565b6103bc600480360360208110156104af57600080fd5b50356001600160a01b0316611217565b6103bc600480360360208110156104d557600080fd5b50356001600160a01b0316611514565b6103bc611526565b6103bc6004803603602081101561050357600080fd5b50356001600160a01b031661152c565b6105396004803603602081101561052957600080fd5b50356001600160a01b031661153e565b6040805192835260208301919091528051918290030190f35b6102a36118e1565b61037c6004803603604081101561057057600080fd5b506001600160a01b038135169060200135611906565b6103bc611913565b610276600480360360208110156105a457600080fd5b50356001600160a01b0316611919565b610398611a81565b610398611a90565b610276600480360360e08110156105da57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611a9f565b6102766004803603602081101561062b57600080fd5b503563ffffffff16611c9e565b6103bc6004803603604081101561064e57600080fd5b506001600160a01b0381358116916020013516611d6a565b610276611d87565b600d546001146106b6576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55841515806106c95750600084115b6107045760405162461bcd60e51b8152600401808060200182810382526023815260200180612a3f6023913960400191505060405180910390fd5b60008061070f61104b565b5091509150816001600160701b0316871080156107345750806001600160701b031686105b610785576040805162461bcd60e51b815260206004820152601f60248201527f50616e63616b653a20494e53554646494349454e545f4c495155494449545900604482015290519081900360640190fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107c35750806001600160a01b0316896001600160a01b031614155b61080a576040805162461bcd60e51b815260206004820152601360248201527250616e63616b653a20494e56414c49445f544f60681b604482015290519081900360640190fd5b8a1561081b5761081b828a8d611ee6565b891561082c5761082c818a8c611ee6565b86156108e757886001600160a01b031663f941e33e338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561092d57600080fd5b505afa158015610941573d6000803e3d6000fd5b505050506040513d602081101561095757600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156109a357600080fd5b505afa1580156109b7573d6000803e3d6000fd5b505050506040513d60208110156109cd57600080fd5b5051925060009150506001600160701b0385168a900383116109f05760006109ff565b89856001600160701b03160383035b9050600089856001600160701b0316038311610a1c576000610a2b565b89856001600160701b03160383035b90506000821180610a3c5750600081115b610a775760405162461bcd60e51b81526004018080602001828103825260228152602001806129f86022913960400191505060405180910390fd5b600c54600090610ab490610a9690859063ffffffff9081169061208016565b610aa88761271063ffffffff61208016565b9063ffffffff6120e316565b600c54909150600090610ad690610a9690859063ffffffff9081169061208016565b9050610b0e60405180604001604052806015815260200174506f6f6c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d60581b815250612133565b610b3a6040518060400160405280600a81526020016903130b630b731b29018160b51b815250876121dc565b610b6f6040518060400160405280600a81526020016903932b9b2b93b329018160b51b815250896001600160701b03166121dc565b610b9e6040518060400160405280600d81526020016c030b6b7bab73a10181027baba1609d1b8152508e6121dc565b610bcc6040518060400160405280600c81526020016b030b6b7bab73a10181024b7160a51b815250856121dc565b610c006040518060400160405280601281526020017118985b185b98d9480c08185a991d5cdd195960721b815250836121dc565b610c2c6040518060400160405280600a81526020016903130b630b731b29018960b51b815250866121dc565b610c616040518060400160405280600a81526020016903932b9b2b93b329018960b51b815250886001600160701b03166121dc565b610c906040518060400160405280600d81526020016c030b6b7bab73a10189027baba1609d1b8152508d6121dc565b610cbe6040518060400160405280600c81526020016b030b6b7bab73a10189024b7160a51b815250846121dc565b610cf26040518060400160405280601281526020017118985b185b98d9480c48185a991d5cdd195960721b815250826121dc565b60408051808201909152600a815269039bbb0b8103332b29d160b51b6020820152600c54610d26919063ffffffff166121dc565b60408051808201909152600681526502632b33a1d160d51b6020820152610d5c90610d57848463ffffffff61208016565b6121dc565b60408051808201909152600781526602934b3b43a1d160cd1b6020820152610dae90610d576305f5e100610da26001600160701b038d8116908d1663ffffffff61208016565b9063ffffffff61208016565b604080518082019091526006815265024b990259d160d51b6020820152610e0a90610df36305f5e100610da26001600160701b038d8116908d1663ffffffff61208016565b610e03858563ffffffff61208016565b101561228e565b610e2e6305f5e100610da26001600160701b038b8116908b1663ffffffff61208016565b610e3e838363ffffffff61208016565b1015610e7e576040805162461bcd60e51b815260206004820152600a60248201526950616e63616b653a204b60b01b604482015290519081900360640190fd5b5050610e8c8484888861233e565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b60008163ffffffff1611610f4d576040805162461bcd60e51b815260206004820152601860248201527f57696e657279506169723a206c6f776572207468656e20300000000000000000604482015290519081900360640190fd5b6005546001600160a01b03163314610fa4576040805162461bcd60e51b81526020600482015260156024820152742bb4b732b93ca830b4b91d102327a92124a22222a760591b604482015290519081900360640190fd5b6101f48163ffffffff161115610ffd576040805162461bcd60e51b815260206004820152601960248201527857696e657279506169723a20464f5242494444454e5f46454560381b604482015290519081900360640190fd5b600c805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b6040518060400160405280600a81526020016957696e657279204c507360b01b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000611082338484612500565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914611126576001600160a01b0384166000908152600260209081526040808320338452909152902054611101908363ffffffff6120e316565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b611131848484612562565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b031633146111bd576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b600c5463ffffffff1681565b60095481565b600a5481565b600c54640100000000900463ffffffff1681565b6000600d54600114611261576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d8190558061127161104b565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156112c557600080fd5b505afa1580156112d9573d6000803e3d6000fd5b505050506040513d60208110156112ef57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561134257600080fd5b505afa158015611356573d6000803e3d6000fd5b505050506040513d602081101561136c57600080fd5b50519050600061138b836001600160701b03871663ffffffff6120e316565b905060006113a8836001600160701b03871663ffffffff6120e316565b905060006113b6878761261c565b600054909150806113f3576113df6103e8610aa86113da878763ffffffff61208016565b61278d565b98506113ee60006103e86127df565b611442565b61143f6001600160701b038916611410868463ffffffff61208016565b8161141757fe5b046001600160701b038916611432868563ffffffff61208016565b8161143957fe5b04612875565b98505b600089116114815760405162461bcd60e51b8152600401808060200182810382526025815260200180612a1a6025913960400191505060405180910390fd5b61148b8a8a6127df565b61149786868a8a61233e565b81156114c7576008546114c3906001600160701b0380821691600160701b90041663ffffffff61208016565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600d54600114611589576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d8190558061159961104b565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156115f557600080fd5b505afa158015611609573d6000803e3d6000fd5b505050506040513d602081101561161f57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561166d57600080fd5b505afa158015611681573d6000803e3d6000fd5b505050506040513d602081101561169757600080fd5b5051306000908152600160205260408120549192506116b6888861261c565b600054909150806116cd848763ffffffff61208016565b816116d457fe5b049a50806116e8848663ffffffff61208016565b816116ef57fe5b04995060008b118015611702575060008a115b61173d5760405162461bcd60e51b81526004018080602001828103825260258152602001806129d36025913960400191505060405180910390fd5b611747308461288d565b611752878d8d611ee6565b61175d868d8c611ee6565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156117a357600080fd5b505afa1580156117b7573d6000803e3d6000fd5b505050506040513d60208110156117cd57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561181957600080fd5b505afa15801561182d573d6000803e3d6000fd5b505050506040513d602081101561184357600080fd5b5051935061185385858b8b61233e565b81156118835760085461187f906001600160701b0380821691600160701b90041663ffffffff61208016565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600d81905550915091565b60405180604001604052806009815260200168057696e6572792d4c560bc1b81525081565b6000611082338484612562565b6103e881565b600d54600114611961576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611a109285928792611a0b926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156119d357600080fd5b505afa1580156119e7573d6000803e3d6000fd5b505050506040513d60208110156119fd57600080fd5b50519063ffffffff6120e316565b611ee6565b600854604080516370a0823160e01b81523060048201529051611a779284928792611a0b92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b1580156119d357600080fd5b50506001600d5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611ae6576040805162461bcd60e51b815260206004820152600f60248201526e15da5b995c9e4e8811561412549151608a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611c01573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611c375750886001600160a01b0316816001600160a01b0316145b611c88576040805162461bcd60e51b815260206004820152601960248201527f57696e6572793a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b611c93898989612500565b505050505050505050565b6005546001600160a01b03163314611cf5576040805162461bcd60e51b81526020600482015260156024820152742bb4b732b93ca830b4b91d102327a92124a22222a760591b604482015290519081900360640190fd5b6127108163ffffffff161115611d4e576040805162461bcd60e51b815260206004820152601960248201527857696e657279506169723a20464f5242494444454e5f46454560381b604482015290519081900360640190fd5b600c805463ffffffff191663ffffffff92909216919091179055565b600260209081526000928352604080842090915290825290205481565b600d54600114611dcf576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55600654604080516370a0823160e01b81523060048201529051611edf926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e2057600080fd5b505afa158015611e34573d6000803e3d6000fd5b505050506040513d6020811015611e4a57600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611e9757600080fd5b505afa158015611eab573d6000803e3d6000fd5b505050506040513d6020811015611ec157600080fd5b50516008546001600160701b0380821691600160701b90041661233e565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611f935780518252601f199092019160209182019101611f74565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611ff5576040519150601f19603f3d011682016040523d82523d6000602084013e611ffa565b606091505b5091509150818015612028575080511580612028575080806020019051602081101561202557600080fd5b50515b612079576040805162461bcd60e51b815260206004820152601760248201527f57696e6572793a205452414e534645525f4641494c4544000000000000000000604482015290519081900360640190fd5b5050505050565b600081158061209b5750508082028282828161209857fe5b04145b611086576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115611086576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6121d9816040516024018080602001828103825283818151815260200191508051906020019080838360005b8381101561217757818101518382015260200161215f565b50505050905090810190601f1680156121a45780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052925061292b915050565b50565b61228a82826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561222757818101518382015260200161220f565b50505050905090810190601f1680156122545780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052935061292b92505050565b5050565b6040805182151560448201526024810191825283516064820152835161228a9285928592829160840190602086019080838360005b838110156122db5781810151838201526020016122c3565b50505050905090810190601f1680156123085780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052935061292b92505050565b6001600160701b03841180159061235c57506001600160701b038311155b6123a0576040805162461bcd60e51b815260206004820152601060248201526f57696e6572793a204f564552464c4f5760801b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b900481168203908116158015906123d057506001600160701b03841615155b80156123e457506001600160701b03831615155b15612455578063ffffffff16612412856123fd8661294c565b6001600160e01b03169063ffffffff61295e16565b600980546001600160e01b03929092169290920201905563ffffffff811661243d846123fd8761294c565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831660009081526001602052604090205461258b908263ffffffff6120e316565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546125c0908263ffffffff61298316565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561266d57600080fd5b505afa158015612681573d6000803e3d6000fd5b505050506040513d602081101561269757600080fd5b5051600b546001600160a01b0382161580159450919250906127795780156127745760006126da6113da6001600160701b0388811690881663ffffffff61208016565b905060006126e78361278d565b905080821115612771576000612715612706848463ffffffff6120e316565b6000549063ffffffff61208016565b600c5490915060009061274d90849061274190879063ffffffff64010000000090910481169061208016565b9063ffffffff61298316565b9050600081838161275a57fe5b049050801561276d5761276d87826127df565b5050505b50505b612785565b8015612785576000600b555b505092915050565b600060038211156127d0575080600160028204015b818110156127ca578091506002818285816127b957fe5b0401816127c257fe5b0490506127a2565b506127da565b81156127da575060015b919050565b6000546127f2908263ffffffff61298316565b60009081556001600160a01b03831681526001602052604090205461281d908263ffffffff61298316565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106128845781612886565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546128b6908263ffffffff6120e316565b6001600160a01b038316600090815260016020526040812091909155546128e3908263ffffffff6120e316565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161297b57fe5b049392505050565b80820182811015611086576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe57696e6572793a20494e53554646494349454e545f4c49515549444954595f4255524e454450616e63616b653a20494e53554646494349454e545f494e5055545f414d4f554e5457696e6572793a20494e53554646494349454e545f4c49515549444954595f4d494e54454450616e63616b653a20494e53554646494349454e545f4f55545055545f414d4f554e54a265627a7a723158202aae9967e24b4740f61d101e13acb0eda0324d6d197e85aaa774a50794e8318364736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a723158202af511d462328a0736a17571806ac57a61dbe623b0957cd8d3a8ba516f43ce4b64736f6c634300051000326080604052600c805463ffffffff60201b1963ffffffff19909116601917166401000000001790556001600d5534801561003857600080fd5b506040514690806052612bbe8239604080519182900360520182208282018252600a83526957696e657279204c507360b01b6020938401528151808301835260018152603160f81b908401528151808401919091527f209f97c6c98b3e10fddb1b3b88872f6547eb8cd111c9b6c664e6507a7cfdccb8818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b03191633179055612a96806101286000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636827e7641161010f578063ba9a7a56116100a2578063d505accf11610071578063d505accf146105c4578063d6d788c314610615578063dd62ed3e14610638578063fff6cae914610666576101e5565b8063ba9a7a5614610586578063bc25cf771461058e578063c45a0155146105b4578063d21220a7146105bc576101e5565b80637ecebe00116100de5780637ecebe00146104ed57806389afcb441461051357806395d89b4114610552578063a9059cbb1461055a576101e5565b80636827e764146104915780636a6278421461049957806370a08231146104bf5780637464fc3d146104e5576101e5565b806323b872dd11610187578063485cc95511610156578063485cc9551461043257806354cf2aeb146104605780635909c0d5146104815780635a3d549314610489576101e5565b806323b872dd146103ce57806330adf81f14610404578063313ce5671461040c5780633644e5151461042a576101e5565b80630902f1ac116101c35780630902f1ac14610318578063095ea7b3146103505780630dfe16811461039057806318160ddd146103b4576101e5565b8063022c0d9f146101ea57806303c150b01461027857806306fdde031461029b575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b50909250905061066e565b005b6102766004803603602081101561028e57600080fd5b503563ffffffff16610ef2565b6102a3611025565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102dd5781810151838201526020016102c5565b50505050905090810190601f16801561030a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61032061104b565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61037c6004803603604081101561036657600080fd5b506001600160a01b038135169060200135611075565b604080519115158252519081900360200190f35b61039861108c565b604080516001600160a01b039092168252519081900360200190f35b6103bc61109b565b60408051918252519081900360200190f35b61037c600480360360608110156103e457600080fd5b506001600160a01b038135811691602081013590911690604001356110a1565b6103bc61113b565b61041461115f565b6040805160ff9092168252519081900360200190f35b6103bc611164565b6102766004803603604081101561044857600080fd5b506001600160a01b038135811691602001351661116a565b6104686111eb565b6040805163ffffffff9092168252519081900360200190f35b6103bc6111f7565b6103bc6111fd565b610468611203565b6103bc600480360360208110156104af57600080fd5b50356001600160a01b0316611217565b6103bc600480360360208110156104d557600080fd5b50356001600160a01b0316611514565b6103bc611526565b6103bc6004803603602081101561050357600080fd5b50356001600160a01b031661152c565b6105396004803603602081101561052957600080fd5b50356001600160a01b031661153e565b6040805192835260208301919091528051918290030190f35b6102a36118e1565b61037c6004803603604081101561057057600080fd5b506001600160a01b038135169060200135611906565b6103bc611913565b610276600480360360208110156105a457600080fd5b50356001600160a01b0316611919565b610398611a81565b610398611a90565b610276600480360360e08110156105da57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611a9f565b6102766004803603602081101561062b57600080fd5b503563ffffffff16611c9e565b6103bc6004803603604081101561064e57600080fd5b506001600160a01b0381358116916020013516611d6a565b610276611d87565b600d546001146106b6576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55841515806106c95750600084115b6107045760405162461bcd60e51b8152600401808060200182810382526023815260200180612a3f6023913960400191505060405180910390fd5b60008061070f61104b565b5091509150816001600160701b0316871080156107345750806001600160701b031686105b610785576040805162461bcd60e51b815260206004820152601f60248201527f50616e63616b653a20494e53554646494349454e545f4c495155494449545900604482015290519081900360640190fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107c35750806001600160a01b0316896001600160a01b031614155b61080a576040805162461bcd60e51b815260206004820152601360248201527250616e63616b653a20494e56414c49445f544f60681b604482015290519081900360640190fd5b8a1561081b5761081b828a8d611ee6565b891561082c5761082c818a8c611ee6565b86156108e757886001600160a01b031663f941e33e338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561092d57600080fd5b505afa158015610941573d6000803e3d6000fd5b505050506040513d602081101561095757600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156109a357600080fd5b505afa1580156109b7573d6000803e3d6000fd5b505050506040513d60208110156109cd57600080fd5b5051925060009150506001600160701b0385168a900383116109f05760006109ff565b89856001600160701b03160383035b9050600089856001600160701b0316038311610a1c576000610a2b565b89856001600160701b03160383035b90506000821180610a3c5750600081115b610a775760405162461bcd60e51b81526004018080602001828103825260228152602001806129f86022913960400191505060405180910390fd5b600c54600090610ab490610a9690859063ffffffff9081169061208016565b610aa88761271063ffffffff61208016565b9063ffffffff6120e316565b600c54909150600090610ad690610a9690859063ffffffff9081169061208016565b9050610b0e60405180604001604052806015815260200174506f6f6c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d60581b815250612133565b610b3a6040518060400160405280600a81526020016903130b630b731b29018160b51b815250876121dc565b610b6f6040518060400160405280600a81526020016903932b9b2b93b329018160b51b815250896001600160701b03166121dc565b610b9e6040518060400160405280600d81526020016c030b6b7bab73a10181027baba1609d1b8152508e6121dc565b610bcc6040518060400160405280600c81526020016b030b6b7bab73a10181024b7160a51b815250856121dc565b610c006040518060400160405280601281526020017118985b185b98d9480c08185a991d5cdd195960721b815250836121dc565b610c2c6040518060400160405280600a81526020016903130b630b731b29018960b51b815250866121dc565b610c616040518060400160405280600a81526020016903932b9b2b93b329018960b51b815250886001600160701b03166121dc565b610c906040518060400160405280600d81526020016c030b6b7bab73a10189027baba1609d1b8152508d6121dc565b610cbe6040518060400160405280600c81526020016b030b6b7bab73a10189024b7160a51b815250846121dc565b610cf26040518060400160405280601281526020017118985b185b98d9480c48185a991d5cdd195960721b815250826121dc565b60408051808201909152600a815269039bbb0b8103332b29d160b51b6020820152600c54610d26919063ffffffff166121dc565b60408051808201909152600681526502632b33a1d160d51b6020820152610d5c90610d57848463ffffffff61208016565b6121dc565b60408051808201909152600781526602934b3b43a1d160cd1b6020820152610dae90610d576305f5e100610da26001600160701b038d8116908d1663ffffffff61208016565b9063ffffffff61208016565b604080518082019091526006815265024b990259d160d51b6020820152610e0a90610df36305f5e100610da26001600160701b038d8116908d1663ffffffff61208016565b610e03858563ffffffff61208016565b101561228e565b610e2e6305f5e100610da26001600160701b038b8116908b1663ffffffff61208016565b610e3e838363ffffffff61208016565b1015610e7e576040805162461bcd60e51b815260206004820152600a60248201526950616e63616b653a204b60b01b604482015290519081900360640190fd5b5050610e8c8484888861233e565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b60008163ffffffff1611610f4d576040805162461bcd60e51b815260206004820152601860248201527f57696e657279506169723a206c6f776572207468656e20300000000000000000604482015290519081900360640190fd5b6005546001600160a01b03163314610fa4576040805162461bcd60e51b81526020600482015260156024820152742bb4b732b93ca830b4b91d102327a92124a22222a760591b604482015290519081900360640190fd5b6101f48163ffffffff161115610ffd576040805162461bcd60e51b815260206004820152601960248201527857696e657279506169723a20464f5242494444454e5f46454560381b604482015290519081900360640190fd5b600c805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b6040518060400160405280600a81526020016957696e657279204c507360b01b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000611082338484612500565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914611126576001600160a01b0384166000908152600260209081526040808320338452909152902054611101908363ffffffff6120e316565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b611131848484612562565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b031633146111bd576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b600c5463ffffffff1681565b60095481565b600a5481565b600c54640100000000900463ffffffff1681565b6000600d54600114611261576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d8190558061127161104b565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156112c557600080fd5b505afa1580156112d9573d6000803e3d6000fd5b505050506040513d60208110156112ef57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561134257600080fd5b505afa158015611356573d6000803e3d6000fd5b505050506040513d602081101561136c57600080fd5b50519050600061138b836001600160701b03871663ffffffff6120e316565b905060006113a8836001600160701b03871663ffffffff6120e316565b905060006113b6878761261c565b600054909150806113f3576113df6103e8610aa86113da878763ffffffff61208016565b61278d565b98506113ee60006103e86127df565b611442565b61143f6001600160701b038916611410868463ffffffff61208016565b8161141757fe5b046001600160701b038916611432868563ffffffff61208016565b8161143957fe5b04612875565b98505b600089116114815760405162461bcd60e51b8152600401808060200182810382526025815260200180612a1a6025913960400191505060405180910390fd5b61148b8a8a6127df565b61149786868a8a61233e565b81156114c7576008546114c3906001600160701b0380821691600160701b90041663ffffffff61208016565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600d54600114611589576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d8190558061159961104b565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156115f557600080fd5b505afa158015611609573d6000803e3d6000fd5b505050506040513d602081101561161f57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561166d57600080fd5b505afa158015611681573d6000803e3d6000fd5b505050506040513d602081101561169757600080fd5b5051306000908152600160205260408120549192506116b6888861261c565b600054909150806116cd848763ffffffff61208016565b816116d457fe5b049a50806116e8848663ffffffff61208016565b816116ef57fe5b04995060008b118015611702575060008a115b61173d5760405162461bcd60e51b81526004018080602001828103825260258152602001806129d36025913960400191505060405180910390fd5b611747308461288d565b611752878d8d611ee6565b61175d868d8c611ee6565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156117a357600080fd5b505afa1580156117b7573d6000803e3d6000fd5b505050506040513d60208110156117cd57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561181957600080fd5b505afa15801561182d573d6000803e3d6000fd5b505050506040513d602081101561184357600080fd5b5051935061185385858b8b61233e565b81156118835760085461187f906001600160701b0380821691600160701b90041663ffffffff61208016565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600d81905550915091565b60405180604001604052806009815260200168057696e6572792d4c560bc1b81525081565b6000611082338484612562565b6103e881565b600d54600114611961576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611a109285928792611a0b926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156119d357600080fd5b505afa1580156119e7573d6000803e3d6000fd5b505050506040513d60208110156119fd57600080fd5b50519063ffffffff6120e316565b611ee6565b600854604080516370a0823160e01b81523060048201529051611a779284928792611a0b92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b1580156119d357600080fd5b50506001600d5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611ae6576040805162461bcd60e51b815260206004820152600f60248201526e15da5b995c9e4e8811561412549151608a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611c01573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611c375750886001600160a01b0316816001600160a01b0316145b611c88576040805162461bcd60e51b815260206004820152601960248201527f57696e6572793a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b611c93898989612500565b505050505050505050565b6005546001600160a01b03163314611cf5576040805162461bcd60e51b81526020600482015260156024820152742bb4b732b93ca830b4b91d102327a92124a22222a760591b604482015290519081900360640190fd5b6127108163ffffffff161115611d4e576040805162461bcd60e51b815260206004820152601960248201527857696e657279506169723a20464f5242494444454e5f46454560381b604482015290519081900360640190fd5b600c805463ffffffff191663ffffffff92909216919091179055565b600260209081526000928352604080842090915290825290205481565b600d54600114611dcf576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55600654604080516370a0823160e01b81523060048201529051611edf926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e2057600080fd5b505afa158015611e34573d6000803e3d6000fd5b505050506040513d6020811015611e4a57600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611e9757600080fd5b505afa158015611eab573d6000803e3d6000fd5b505050506040513d6020811015611ec157600080fd5b50516008546001600160701b0380821691600160701b90041661233e565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611f935780518252601f199092019160209182019101611f74565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611ff5576040519150601f19603f3d011682016040523d82523d6000602084013e611ffa565b606091505b5091509150818015612028575080511580612028575080806020019051602081101561202557600080fd5b50515b612079576040805162461bcd60e51b815260206004820152601760248201527f57696e6572793a205452414e534645525f4641494c4544000000000000000000604482015290519081900360640190fd5b5050505050565b600081158061209b5750508082028282828161209857fe5b04145b611086576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115611086576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6121d9816040516024018080602001828103825283818151815260200191508051906020019080838360005b8381101561217757818101518382015260200161215f565b50505050905090810190601f1680156121a45780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052925061292b915050565b50565b61228a82826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561222757818101518382015260200161220f565b50505050905090810190601f1680156122545780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052935061292b92505050565b5050565b6040805182151560448201526024810191825283516064820152835161228a9285928592829160840190602086019080838360005b838110156122db5781810151838201526020016122c3565b50505050905090810190601f1680156123085780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052935061292b92505050565b6001600160701b03841180159061235c57506001600160701b038311155b6123a0576040805162461bcd60e51b815260206004820152601060248201526f57696e6572793a204f564552464c4f5760801b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b900481168203908116158015906123d057506001600160701b03841615155b80156123e457506001600160701b03831615155b15612455578063ffffffff16612412856123fd8661294c565b6001600160e01b03169063ffffffff61295e16565b600980546001600160e01b03929092169290920201905563ffffffff811661243d846123fd8761294c565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831660009081526001602052604090205461258b908263ffffffff6120e316565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546125c0908263ffffffff61298316565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561266d57600080fd5b505afa158015612681573d6000803e3d6000fd5b505050506040513d602081101561269757600080fd5b5051600b546001600160a01b0382161580159450919250906127795780156127745760006126da6113da6001600160701b0388811690881663ffffffff61208016565b905060006126e78361278d565b905080821115612771576000612715612706848463ffffffff6120e316565b6000549063ffffffff61208016565b600c5490915060009061274d90849061274190879063ffffffff64010000000090910481169061208016565b9063ffffffff61298316565b9050600081838161275a57fe5b049050801561276d5761276d87826127df565b5050505b50505b612785565b8015612785576000600b555b505092915050565b600060038211156127d0575080600160028204015b818110156127ca578091506002818285816127b957fe5b0401816127c257fe5b0490506127a2565b506127da565b81156127da575060015b919050565b6000546127f2908263ffffffff61298316565b60009081556001600160a01b03831681526001602052604090205461281d908263ffffffff61298316565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106128845781612886565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546128b6908263ffffffff6120e316565b6001600160a01b038316600090815260016020526040812091909155546128e3908263ffffffff6120e316565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161297b57fe5b049392505050565b80820182811015611086576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe57696e6572793a20494e53554646494349454e545f4c49515549444954595f4255524e454450616e63616b653a20494e53554646494349454e545f494e5055545f414d4f554e5457696e6572793a20494e53554646494349454e545f4c49515549444954595f4d494e54454450616e63616b653a20494e53554646494349454e545f4f55545055545f414d4f554e54a265627a7a723158202aae9967e24b4740f61d101e13acb0eda0324d6d197e85aaa774a50794e8318364736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80639e68ceb8116100715780639e68ceb814610119578063a2e74af61461014d578063c9c6539614610173578063e6a43905146101a1578063ef0bc993146101cf578063f46901ed146101fe576100a9565b8063017e7e58146100ae578063094b7415146100d25780631e3dd18b146100da578063257671f5146100f7578063574f2ba314610111575b600080fd5b6100b6610224565b604080516001600160a01b039092168252519081900360200190f35b6100b6610233565b6100b6600480360360208110156100f057600080fd5b5035610242565b6100ff610269565b60408051918252519081900360200190f35b6100ff61026f565b61014b6004803603604081101561012f57600080fd5b5080356001600160a01b0316906020013563ffffffff16610275565b005b61014b6004803603602081101561016357600080fd5b50356001600160a01b0316610331565b6100b66004803603604081101561018957600080fd5b506001600160a01b03813581169160200135166103a6565b6100b6600480360360408110156101b757600080fd5b506001600160a01b03813581169160200135166106cb565b61014b600480360360408110156101e557600080fd5b5080356001600160a01b0316906020013560ff166106f1565b61014b6004803603602081101561021457600080fd5b50356001600160a01b03166107dd565b6000546001600160a01b031681565b6001546001600160a01b031681565b6004818154811061024f57fe5b6000918252602090912001546001600160a01b0316905081565b60025481565b60045490565b6001546001600160a01b031633146102c8576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b6040805163d6d788c360e01b815263ffffffff8316600482015290516001600160a01b0384169163d6d788c391602480830192600092919082900301818387803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b505050505050565b6001546001600160a01b03163314610384576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b0316141561040f576040805162461bcd60e51b815260206004820152601b60248201527f57696e6572793a204944454e544943414c5f4144445245535345530000000000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b031610610432578385610435565b84845b90925090506001600160a01b03821661048c576040805162461bcd60e51b815260206004820152601460248201527357696e6572793a205a45524f5f4144445245535360601b604482015290519081900360640190fd5b6001600160a01b038281166000908152600360209081526040808320858516845290915290205416156104fc576040805162461bcd60e51b815260206004820152601360248201527257696e6572793a20504149525f45584953545360681b604482015290519081900360640190fd5b60606040518060200161050e90610852565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b1580156105e157600080fd5b505af11580156105f5573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314610744576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b60008160ff1611610794576040805162461bcd60e51b815260206004820152601560248201527457696e6572793a20464f5242494444454e5f46454560581b604482015290519081900360640190fd5b60408051623c150b60e41b815260ff8316600482015290516001600160a01b038416916303c150b091602480830192600092919082900301818387803b15801561031557600080fd5b6001546001600160a01b03163314610830576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612c10806108608339019056fe6080604052600c805463ffffffff60201b1963ffffffff19909116601917166401000000001790556001600d5534801561003857600080fd5b506040514690806052612bbe8239604080519182900360520182208282018252600a83526957696e657279204c507360b01b6020938401528151808301835260018152603160f81b908401528151808401919091527f209f97c6c98b3e10fddb1b3b88872f6547eb8cd111c9b6c664e6507a7cfdccb8818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b03191633179055612a96806101286000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636827e7641161010f578063ba9a7a56116100a2578063d505accf11610071578063d505accf146105c4578063d6d788c314610615578063dd62ed3e14610638578063fff6cae914610666576101e5565b8063ba9a7a5614610586578063bc25cf771461058e578063c45a0155146105b4578063d21220a7146105bc576101e5565b80637ecebe00116100de5780637ecebe00146104ed57806389afcb441461051357806395d89b4114610552578063a9059cbb1461055a576101e5565b80636827e764146104915780636a6278421461049957806370a08231146104bf5780637464fc3d146104e5576101e5565b806323b872dd11610187578063485cc95511610156578063485cc9551461043257806354cf2aeb146104605780635909c0d5146104815780635a3d549314610489576101e5565b806323b872dd146103ce57806330adf81f14610404578063313ce5671461040c5780633644e5151461042a576101e5565b80630902f1ac116101c35780630902f1ac14610318578063095ea7b3146103505780630dfe16811461039057806318160ddd146103b4576101e5565b8063022c0d9f146101ea57806303c150b01461027857806306fdde031461029b575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b50909250905061066e565b005b6102766004803603602081101561028e57600080fd5b503563ffffffff16610ef2565b6102a3611025565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102dd5781810151838201526020016102c5565b50505050905090810190601f16801561030a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61032061104b565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61037c6004803603604081101561036657600080fd5b506001600160a01b038135169060200135611075565b604080519115158252519081900360200190f35b61039861108c565b604080516001600160a01b039092168252519081900360200190f35b6103bc61109b565b60408051918252519081900360200190f35b61037c600480360360608110156103e457600080fd5b506001600160a01b038135811691602081013590911690604001356110a1565b6103bc61113b565b61041461115f565b6040805160ff9092168252519081900360200190f35b6103bc611164565b6102766004803603604081101561044857600080fd5b506001600160a01b038135811691602001351661116a565b6104686111eb565b6040805163ffffffff9092168252519081900360200190f35b6103bc6111f7565b6103bc6111fd565b610468611203565b6103bc600480360360208110156104af57600080fd5b50356001600160a01b0316611217565b6103bc600480360360208110156104d557600080fd5b50356001600160a01b0316611514565b6103bc611526565b6103bc6004803603602081101561050357600080fd5b50356001600160a01b031661152c565b6105396004803603602081101561052957600080fd5b50356001600160a01b031661153e565b6040805192835260208301919091528051918290030190f35b6102a36118e1565b61037c6004803603604081101561057057600080fd5b506001600160a01b038135169060200135611906565b6103bc611913565b610276600480360360208110156105a457600080fd5b50356001600160a01b0316611919565b610398611a81565b610398611a90565b610276600480360360e08110156105da57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611a9f565b6102766004803603602081101561062b57600080fd5b503563ffffffff16611c9e565b6103bc6004803603604081101561064e57600080fd5b506001600160a01b0381358116916020013516611d6a565b610276611d87565b600d546001146106b6576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55841515806106c95750600084115b6107045760405162461bcd60e51b8152600401808060200182810382526023815260200180612a3f6023913960400191505060405180910390fd5b60008061070f61104b565b5091509150816001600160701b0316871080156107345750806001600160701b031686105b610785576040805162461bcd60e51b815260206004820152601f60248201527f50616e63616b653a20494e53554646494349454e545f4c495155494449545900604482015290519081900360640190fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107c35750806001600160a01b0316896001600160a01b031614155b61080a576040805162461bcd60e51b815260206004820152601360248201527250616e63616b653a20494e56414c49445f544f60681b604482015290519081900360640190fd5b8a1561081b5761081b828a8d611ee6565b891561082c5761082c818a8c611ee6565b86156108e757886001600160a01b031663f941e33e338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561092d57600080fd5b505afa158015610941573d6000803e3d6000fd5b505050506040513d602081101561095757600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156109a357600080fd5b505afa1580156109b7573d6000803e3d6000fd5b505050506040513d60208110156109cd57600080fd5b5051925060009150506001600160701b0385168a900383116109f05760006109ff565b89856001600160701b03160383035b9050600089856001600160701b0316038311610a1c576000610a2b565b89856001600160701b03160383035b90506000821180610a3c5750600081115b610a775760405162461bcd60e51b81526004018080602001828103825260228152602001806129f86022913960400191505060405180910390fd5b600c54600090610ab490610a9690859063ffffffff9081169061208016565b610aa88761271063ffffffff61208016565b9063ffffffff6120e316565b600c54909150600090610ad690610a9690859063ffffffff9081169061208016565b9050610b0e60405180604001604052806015815260200174506f6f6c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d60581b815250612133565b610b3a6040518060400160405280600a81526020016903130b630b731b29018160b51b815250876121dc565b610b6f6040518060400160405280600a81526020016903932b9b2b93b329018160b51b815250896001600160701b03166121dc565b610b9e6040518060400160405280600d81526020016c030b6b7bab73a10181027baba1609d1b8152508e6121dc565b610bcc6040518060400160405280600c81526020016b030b6b7bab73a10181024b7160a51b815250856121dc565b610c006040518060400160405280601281526020017118985b185b98d9480c08185a991d5cdd195960721b815250836121dc565b610c2c6040518060400160405280600a81526020016903130b630b731b29018960b51b815250866121dc565b610c616040518060400160405280600a81526020016903932b9b2b93b329018960b51b815250886001600160701b03166121dc565b610c906040518060400160405280600d81526020016c030b6b7bab73a10189027baba1609d1b8152508d6121dc565b610cbe6040518060400160405280600c81526020016b030b6b7bab73a10189024b7160a51b815250846121dc565b610cf26040518060400160405280601281526020017118985b185b98d9480c48185a991d5cdd195960721b815250826121dc565b60408051808201909152600a815269039bbb0b8103332b29d160b51b6020820152600c54610d26919063ffffffff166121dc565b60408051808201909152600681526502632b33a1d160d51b6020820152610d5c90610d57848463ffffffff61208016565b6121dc565b60408051808201909152600781526602934b3b43a1d160cd1b6020820152610dae90610d576305f5e100610da26001600160701b038d8116908d1663ffffffff61208016565b9063ffffffff61208016565b604080518082019091526006815265024b990259d160d51b6020820152610e0a90610df36305f5e100610da26001600160701b038d8116908d1663ffffffff61208016565b610e03858563ffffffff61208016565b101561228e565b610e2e6305f5e100610da26001600160701b038b8116908b1663ffffffff61208016565b610e3e838363ffffffff61208016565b1015610e7e576040805162461bcd60e51b815260206004820152600a60248201526950616e63616b653a204b60b01b604482015290519081900360640190fd5b5050610e8c8484888861233e565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b60008163ffffffff1611610f4d576040805162461bcd60e51b815260206004820152601860248201527f57696e657279506169723a206c6f776572207468656e20300000000000000000604482015290519081900360640190fd5b6005546001600160a01b03163314610fa4576040805162461bcd60e51b81526020600482015260156024820152742bb4b732b93ca830b4b91d102327a92124a22222a760591b604482015290519081900360640190fd5b6101f48163ffffffff161115610ffd576040805162461bcd60e51b815260206004820152601960248201527857696e657279506169723a20464f5242494444454e5f46454560381b604482015290519081900360640190fd5b600c805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b6040518060400160405280600a81526020016957696e657279204c507360b01b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000611082338484612500565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914611126576001600160a01b0384166000908152600260209081526040808320338452909152902054611101908363ffffffff6120e316565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b611131848484612562565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b031633146111bd576040805162461bcd60e51b81526020600482015260116024820152702bb4b732b93c9d102327a92124a22222a760791b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b600c5463ffffffff1681565b60095481565b600a5481565b600c54640100000000900463ffffffff1681565b6000600d54600114611261576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d8190558061127161104b565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156112c557600080fd5b505afa1580156112d9573d6000803e3d6000fd5b505050506040513d60208110156112ef57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561134257600080fd5b505afa158015611356573d6000803e3d6000fd5b505050506040513d602081101561136c57600080fd5b50519050600061138b836001600160701b03871663ffffffff6120e316565b905060006113a8836001600160701b03871663ffffffff6120e316565b905060006113b6878761261c565b600054909150806113f3576113df6103e8610aa86113da878763ffffffff61208016565b61278d565b98506113ee60006103e86127df565b611442565b61143f6001600160701b038916611410868463ffffffff61208016565b8161141757fe5b046001600160701b038916611432868563ffffffff61208016565b8161143957fe5b04612875565b98505b600089116114815760405162461bcd60e51b8152600401808060200182810382526025815260200180612a1a6025913960400191505060405180910390fd5b61148b8a8a6127df565b61149786868a8a61233e565b81156114c7576008546114c3906001600160701b0380821691600160701b90041663ffffffff61208016565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600d54600114611589576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d8190558061159961104b565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156115f557600080fd5b505afa158015611609573d6000803e3d6000fd5b505050506040513d602081101561161f57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561166d57600080fd5b505afa158015611681573d6000803e3d6000fd5b505050506040513d602081101561169757600080fd5b5051306000908152600160205260408120549192506116b6888861261c565b600054909150806116cd848763ffffffff61208016565b816116d457fe5b049a50806116e8848663ffffffff61208016565b816116ef57fe5b04995060008b118015611702575060008a115b61173d5760405162461bcd60e51b81526004018080602001828103825260258152602001806129d36025913960400191505060405180910390fd5b611747308461288d565b611752878d8d611ee6565b61175d868d8c611ee6565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156117a357600080fd5b505afa1580156117b7573d6000803e3d6000fd5b505050506040513d60208110156117cd57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561181957600080fd5b505afa15801561182d573d6000803e3d6000fd5b505050506040513d602081101561184357600080fd5b5051935061185385858b8b61233e565b81156118835760085461187f906001600160701b0380821691600160701b90041663ffffffff61208016565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600d81905550915091565b60405180604001604052806009815260200168057696e6572792d4c560bc1b81525081565b6000611082338484612562565b6103e881565b600d54600114611961576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611a109285928792611a0b926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156119d357600080fd5b505afa1580156119e7573d6000803e3d6000fd5b505050506040513d60208110156119fd57600080fd5b50519063ffffffff6120e316565b611ee6565b600854604080516370a0823160e01b81523060048201529051611a779284928792611a0b92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b1580156119d357600080fd5b50506001600d5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611ae6576040805162461bcd60e51b815260206004820152600f60248201526e15da5b995c9e4e8811561412549151608a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611c01573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611c375750886001600160a01b0316816001600160a01b0316145b611c88576040805162461bcd60e51b815260206004820152601960248201527f57696e6572793a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b611c93898989612500565b505050505050505050565b6005546001600160a01b03163314611cf5576040805162461bcd60e51b81526020600482015260156024820152742bb4b732b93ca830b4b91d102327a92124a22222a760591b604482015290519081900360640190fd5b6127108163ffffffff161115611d4e576040805162461bcd60e51b815260206004820152601960248201527857696e657279506169723a20464f5242494444454e5f46454560381b604482015290519081900360640190fd5b600c805463ffffffff191663ffffffff92909216919091179055565b600260209081526000928352604080842090915290825290205481565b600d54600114611dcf576040805162461bcd60e51b815260206004820152600e60248201526d15da5b995c9e4e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55600654604080516370a0823160e01b81523060048201529051611edf926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e2057600080fd5b505afa158015611e34573d6000803e3d6000fd5b505050506040513d6020811015611e4a57600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611e9757600080fd5b505afa158015611eab573d6000803e3d6000fd5b505050506040513d6020811015611ec157600080fd5b50516008546001600160701b0380821691600160701b90041661233e565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611f935780518252601f199092019160209182019101611f74565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611ff5576040519150601f19603f3d011682016040523d82523d6000602084013e611ffa565b606091505b5091509150818015612028575080511580612028575080806020019051602081101561202557600080fd5b50515b612079576040805162461bcd60e51b815260206004820152601760248201527f57696e6572793a205452414e534645525f4641494c4544000000000000000000604482015290519081900360640190fd5b5050505050565b600081158061209b5750508082028282828161209857fe5b04145b611086576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115611086576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6121d9816040516024018080602001828103825283818151815260200191508051906020019080838360005b8381101561217757818101518382015260200161215f565b50505050905090810190601f1680156121a45780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052925061292b915050565b50565b61228a82826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561222757818101518382015260200161220f565b50505050905090810190601f1680156122545780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052935061292b92505050565b5050565b6040805182151560448201526024810191825283516064820152835161228a9285928592829160840190602086019080838360005b838110156122db5781810151838201526020016122c3565b50505050905090810190601f1680156123085780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052935061292b92505050565b6001600160701b03841180159061235c57506001600160701b038311155b6123a0576040805162461bcd60e51b815260206004820152601060248201526f57696e6572793a204f564552464c4f5760801b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b900481168203908116158015906123d057506001600160701b03841615155b80156123e457506001600160701b03831615155b15612455578063ffffffff16612412856123fd8661294c565b6001600160e01b03169063ffffffff61295e16565b600980546001600160e01b03929092169290920201905563ffffffff811661243d846123fd8761294c565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831660009081526001602052604090205461258b908263ffffffff6120e316565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546125c0908263ffffffff61298316565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561266d57600080fd5b505afa158015612681573d6000803e3d6000fd5b505050506040513d602081101561269757600080fd5b5051600b546001600160a01b0382161580159450919250906127795780156127745760006126da6113da6001600160701b0388811690881663ffffffff61208016565b905060006126e78361278d565b905080821115612771576000612715612706848463ffffffff6120e316565b6000549063ffffffff61208016565b600c5490915060009061274d90849061274190879063ffffffff64010000000090910481169061208016565b9063ffffffff61298316565b9050600081838161275a57fe5b049050801561276d5761276d87826127df565b5050505b50505b612785565b8015612785576000600b555b505092915050565b600060038211156127d0575080600160028204015b818110156127ca578091506002818285816127b957fe5b0401816127c257fe5b0490506127a2565b506127da565b81156127da575060015b919050565b6000546127f2908263ffffffff61298316565b60009081556001600160a01b03831681526001602052604090205461281d908263ffffffff61298316565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106128845781612886565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546128b6908263ffffffff6120e316565b6001600160a01b038316600090815260016020526040812091909155546128e3908263ffffffff6120e316565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161297b57fe5b049392505050565b80820182811015611086576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe57696e6572793a20494e53554646494349454e545f4c49515549444954595f4255524e454450616e63616b653a20494e53554646494349454e545f494e5055545f414d4f554e5457696e6572793a20494e53554646494349454e545f4c49515549444954595f4d494e54454450616e63616b653a20494e53554646494349454e545f4f55545055545f414d4f554e54a265627a7a723158202aae9967e24b4740f61d101e13acb0eda0324d6d197e85aaa774a50794e8318364736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a723158202af511d462328a0736a17571806ac57a61dbe623b0957cd8d3a8ba516f43ce4b64736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 392,
        "contract": "contracts/WineryFactory.sol:WineryFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 394,
        "contract": "contracts/WineryFactory.sol:WineryFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 405,
        "contract": "contracts/WineryFactory.sol:WineryFactory",
        "label": "INIT_CODE_HASH",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 411,
        "contract": "contracts/WineryFactory.sol:WineryFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 414,
        "contract": "contracts/WineryFactory.sol:WineryFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}