/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type PoolStruct = {
  poolAddress: PromiseOrValue<string>;
  token0: PromiseOrValue<string>;
  token1: PromiseOrValue<string>;
  token0Reserve: PromiseOrValue<BigNumberish>;
  token1Reserve: PromiseOrValue<BigNumberish>;
  swapFee: PromiseOrValue<BigNumberish>;
};

export type PoolStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  poolAddress: string;
  token0: string;
  token1: string;
  token0Reserve: BigNumber;
  token1Reserve: BigNumber;
  swapFee: BigNumber;
};

export interface CyclicProfitCalculatorInterface extends utils.Interface {
  functions: {
    "calculateDebt((address,address,address,uint256,uint256,uint256)[],address)": FunctionFragment;
    "startSwapInMultiPool((address,address,address,uint256,uint256,uint256)[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "calculateDebt" | "startSwapInMultiPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateDebt",
    values: [PoolStruct[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startSwapInMultiPool",
    values: [PoolStruct[], PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSwapInMultiPool",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CyclicProfitCalculator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CyclicProfitCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateDebt(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { debt: BigNumber }>;

    startSwapInMultiPool(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateDebt(
    poolPath: PoolStruct[],
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startSwapInMultiPool(
    poolPath: PoolStruct[],
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateDebt(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startSwapInMultiPool(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculateDebt(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startSwapInMultiPool(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateDebt(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startSwapInMultiPool(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
