/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type KCheckerStruct = {
  reserve0: PromiseOrValue<BigNumberish>;
  reserve1: PromiseOrValue<BigNumberish>;
  isToken0IsIntermediaryToken: PromiseOrValue<boolean>;
  oldAmount: PromiseOrValue<BigNumberish>;
  newAmount: PromiseOrValue<BigNumberish>;
  swapFee: PromiseOrValue<BigNumberish>;
  token0Address: PromiseOrValue<string>;
  token1Address: PromiseOrValue<string>;
  poolAddress: PromiseOrValue<string>;
};

export type KCheckerStructOutput = [
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  reserve0: BigNumber;
  reserve1: BigNumber;
  isToken0IsIntermediaryToken: boolean;
  oldAmount: BigNumber;
  newAmount: BigNumber;
  swapFee: BigNumber;
  token0Address: string;
  token1Address: string;
  poolAddress: string;
};

export type PoolStruct = {
  poolAddress: PromiseOrValue<string>;
  token0: PromiseOrValue<string>;
  token1: PromiseOrValue<string>;
  token0Reserve: PromiseOrValue<BigNumberish>;
  token1Reserve: PromiseOrValue<BigNumberish>;
  swapFee: PromiseOrValue<BigNumberish>;
};

export type PoolStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  poolAddress: string;
  token0: string;
  token1: string;
  token0Reserve: BigNumber;
  token1Reserve: BigNumber;
  swapFee: BigNumber;
};

export interface FlashswapMultiPoolInterface extends utils.Interface {
  functions: {
    "checkK((uint256,uint256,bool,uint256,uint256,uint256,address,address,address))": FunctionFragment;
    "logCaseString((address,address,address,uint256,uint256,uint256)[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startSwapInMultiPool((address,address,address,uint256,uint256,uint256)[],address,uint256,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFund(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkK"
      | "logCaseString"
      | "owner"
      | "renounceOwnership"
      | "startSwapInMultiPool"
      | "transferOwnership"
      | "withdrawFund"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkK",
    values: [KCheckerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "logCaseString",
    values: [PoolStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startSwapInMultiPool",
    values: [
      PoolStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFund",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "checkK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "logCaseString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSwapInMultiPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFund",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface FlashswapMultiPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlashswapMultiPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkK(k: KCheckerStruct, overrides?: CallOverrides): Promise<[boolean]>;

    logCaseString(
      poolPath: PoolStruct[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startSwapInMultiPool(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      caseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFund(
      erc20Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkK(k: KCheckerStruct, overrides?: CallOverrides): Promise<boolean>;

  logCaseString(
    poolPath: PoolStruct[],
    overrides?: CallOverrides
  ): Promise<void>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startSwapInMultiPool(
    poolPath: PoolStruct[],
    baseToken: PromiseOrValue<string>,
    debtAmount: PromiseOrValue<BigNumberish>,
    caseId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFund(
    erc20Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkK(k: KCheckerStruct, overrides?: CallOverrides): Promise<boolean>;

    logCaseString(
      poolPath: PoolStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startSwapInMultiPool(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      caseId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFund(
      erc20Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    checkK(k: KCheckerStruct, overrides?: CallOverrides): Promise<BigNumber>;

    logCaseString(
      poolPath: PoolStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startSwapInMultiPool(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      caseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFund(
      erc20Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkK(
      k: KCheckerStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    logCaseString(
      poolPath: PoolStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startSwapInMultiPool(
      poolPath: PoolStruct[],
      baseToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      caseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFund(
      erc20Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
